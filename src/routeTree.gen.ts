/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedMeRouteImport } from './routes/_authed/me'
import { Route as ApiChatIndexRouteImport } from './routes/api/chat/index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedMeRoute = AuthedMeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => AuthedRoute,
} as any)
const ApiChatIndexRoute = ApiChatIndexRouteImport.update({
  id: '/api/chat/',
  path: '/api/chat/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/me': typeof AuthedMeRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/chat': typeof ApiChatIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/me': typeof AuthedMeRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/chat': typeof ApiChatIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authed/me': typeof AuthedMeRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/chat/': typeof ApiChatIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/me' | '/api/auth/$' | '/api/chat'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/me' | '/api/auth/$' | '/api/chat'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/_authed/me'
    | '/api/auth/$'
    | '/api/chat/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiChatIndexRoute: typeof ApiChatIndexRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/me': {
      id: '/_authed/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof AuthedMeRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/api/chat/': {
      id: '/api/chat/'
      path: '/api/chat'
      fullPath: '/api/chat'
      preLoaderRoute: typeof ApiChatIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthedRouteChildren {
  AuthedMeRoute: typeof AuthedMeRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedMeRoute: AuthedMeRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiChatIndexRoute: ApiChatIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/solid-start'
declare module '@tanstack/solid-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
